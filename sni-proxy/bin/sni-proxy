#!/usr/bin/env python3
import asyncio
import socket
import argparse
import os
import re
import struct
from typing import Tuple, Optional, List, Dict

# Constants
DEFAULT_HTTPS_PORT = 443
DEFAULT_HTTP_PORT = 80
DEFAULT_LISTEN_HOST = '127.0.0.1'
DEFAULT_LISTEN_PORT = 3130
DEFAULT_LISTEN_HTTP_PORT = 3131
BUFFER_SIZE = 4096
PROXY_CONNECT_TIMEOUT = 30
PROXY_DEFAULT_PORT = 3128

# Constants for SO_ORIGINAL_DST (Linux-specific)
SO_ORIGINAL_DST = 80  # Typically 80 on Linux systems

def get_original_dst(sock: socket.socket) -> Optional[Tuple[str, int]]:
    """Get original destination using SO_ORIGINAL_DST (Linux only)"""
    try:
        if sock.family == socket.AF_INET:
            dst = sock.getsockopt(socket.SOL_IP, SO_ORIGINAL_DST, 16)
            port, ip = struct.unpack("!2xH4s8x", dst)
            ip = socket.inet_ntoa(ip)
            return ip, port
    except (OSError, struct.error):
        pass
    return None

def get_proxy_from_env() -> Tuple[Optional[str], Optional[int]]:
    """Get proxy from environment variables https_proxy or HTTPS_PROXY"""
    proxy_url = os.environ.get('https_proxy', os.environ.get('HTTPS_PROXY'))
    if not proxy_url:
        return None, None
    proxy_url = re.sub(r'^https?://', '', proxy_url)
    if ':' in proxy_url:
        host, port = proxy_url.split(':', 1)
        return host, int(port)
    return proxy_url, PROXY_DEFAULT_PORT

def get_no_proxy_list() -> List[str]:
    """Get no_proxy list from environment variables"""
    no_proxy = os.environ.get('no_proxy', os.environ.get('NO_PROXY', ''))
    return [domain.strip().lower() for domain in no_proxy.split(',') if domain.strip()]

def get_proxy_only_list() -> List[str]:
    """Get proxy-only list from environment variables"""
    proxy_only = os.environ.get('PROXY_ONLY', os.environ.get('PROXY_ONLY', ''))
    return [domain.strip().lower() for domain in proxy_only.split(',') if domain.strip()]

async def parse_sni(data: bytes) -> Optional[str]:
    """Parse SNI from TLS ClientHello"""
    try:
        if data[0] == 0x16 and data[5] == 0x01:
            offset = 5 + 38
            session_id_length = data[offset]
            offset += 1 + session_id_length
            cipher_suites_length = int.from_bytes(data[offset:offset+2], 'big')
            offset += 2 + cipher_suites_length
            compression_methods_length = data[offset]
            offset += 1 + compression_methods_length
            extensions_length = int.from_bytes(data[offset:offset+2], 'big')
            offset += 2
            end_extensions = offset + extensions_length
            while offset < end_extensions:
                extension_type = int.from_bytes(data[offset:offset+2], 'big')
                offset += 2
                extension_length = int.from_bytes(data[offset:offset+2], 'big')
                offset += 2
                if extension_type == 0x00:
                    sni_list_length = int.from_bytes(data[offset:offset+2], 'big')
                    offset += 2
                    if sni_list_length > 0:
                        sni_type = data[offset]
                        offset += 1
                        sni_length = int.from_bytes(data[offset:offset+2], 'big')
                        offset += 2
                        return data[offset:offset+sni_length].decode('utf-8')
                else:
                    offset += extension_length
    except (IndexError, ValueError):
        pass
    return None

async def parse_http_host(data: bytes) -> Optional[str]:
    """Parse Host header from HTTP request"""
    try:
        headers = data.split(b'\r\n')
        for header in headers:
            if header.startswith(b'Host: '):
                return header[6:].decode('utf-8').strip()
    except (UnicodeDecodeError, IndexError):
        pass
    return None

async def pipe(reader: asyncio.StreamReader, writer: asyncio.StreamWriter) -> None:
    """Forward data between reader and writer"""
    try:
        while True:
            data = await reader.read(BUFFER_SIZE)
            if not data:
                break
            writer.write(data)
            await writer.drain()
    except (ConnectionResetError, BrokenPipeError):
        pass
    finally:
        writer.close()
        try:
            await writer.wait_closed()
        except (ConnectionResetError, BrokenPipeError):
            pass

async def connect_direct(host: str, port: int) -> Tuple[asyncio.StreamReader, asyncio.StreamWriter]:
    """Direct connection without proxy"""
    return await asyncio.open_connection(host, port)

async def handle_https_client(
    reader: asyncio.StreamReader,
    writer: asyncio.StreamWriter,
    proxy_host: Optional[str],
    proxy_port: Optional[int],
    no_proxy_list: List[str],
    proxy_only_list: List[str]
) -> None:
    """Handle HTTPS connection by parsing SNI"""
    client_ip, _ = writer.get_extra_info('peername')
    sock = writer.get_extra_info('socket')
    original_dst = None
    original_ip = None
    original_port = DEFAULT_HTTPS_PORT
    try:
        if sock:
            original_dst = get_original_dst(sock)
            if original_dst:
                original_ip, original_port = original_dst

        data = await reader.read(BUFFER_SIZE)
        if not data:
            writer.close()
            await writer.wait_closed()
            return

        sni = await parse_sni(data)
        if not sni:
            print(f"SNI not found from {client_ip}")
            writer.close()
            await writer.wait_closed()
            return

        await proxy_connection(
            sni, original_port, original_ip,
            reader, writer,
            client_ip,
            proxy_host, proxy_port,
            no_proxy_list,
            proxy_only_list,
            initial_data=data,
            is_https=True
        )

    except Exception as e:
        print(f"Error handling HTTPS from {client_ip}: {e}")
    finally:
        writer.close()
        try:
            await writer.wait_closed()
        except:
            pass

async def handle_http_client(
    reader: asyncio.StreamReader,
    writer: asyncio.StreamWriter,
    proxy_host: Optional[str],
    proxy_port: Optional[int],
    no_proxy_list: List[str],
    proxy_only_list: List[str]
) -> None:
    """Handle HTTP connection by parsing Host header"""
    client_ip, _ = writer.get_extra_info('peername')
    sock = writer.get_extra_info('socket')
    original_dst = None
    original_ip = None
    original_port = DEFAULT_HTTP_PORT
    try:
        if sock:
            original_dst = get_original_dst(sock)
            if original_dst:
                original_ip, original_port = original_dst
        data = await reader.read(BUFFER_SIZE)
        if not data:
            writer.close()
            await writer.wait_closed()
            return

        host_str = await parse_http_host(data)
        if not host_str:
            print(f"Host header not found from {client_ip}")
            writer.close()
            await writer.wait_closed()
            return

        host_ar = host_str.split(':')
        host = host_ar[0]
        try:
            port = int(host_ar[1])
        except:
            port = DEFAULT_HTTP_PORT

        await proxy_connection(
            host, port, original_ip,
            reader, writer,
            client_ip,
            proxy_host, proxy_port,
            no_proxy_list,
            proxy_only_list,
            initial_data=data,
            is_https=False
        )

    except Exception as e:
        print(f"Error handling HTTP from {client_ip}: {e}")
    finally:
        writer.close()
        try:
            await writer.wait_closed()
        except:
            pass

async def proxy_connection(
    target_host: str,
    target_port: int,
    original_ip: str,
    client_reader: asyncio.StreamReader,
    client_writer: asyncio.StreamWriter,
    client_ip: str,
    proxy_host: Optional[str],
    proxy_port: Optional[int],
    no_proxy_list: List[str],
    proxy_only_list: List[str],
    initial_data: bytes = b'',
    is_https: bool = False
) -> None:
    """Proxy connection to target either directly or via proxy"""
    use_proxy = True

    # Check no_proxy first (highest priority)
    if any(target_host.endswith(domain) for domain in no_proxy_list):
        use_proxy = False
    else:
        # Check proxy_only_list if not empty
        if proxy_only_list:
            if not any(target_host.endswith(domain) for domain in proxy_only_list):
                use_proxy = False

    if use_proxy and proxy_host and proxy_port:
        print(f"{client_ip} => {original_ip}:{target_port}: Proxying connection for {target_host}:{target_port} via {proxy_host}:{proxy_port}")
        remote_reader, remote_writer = await asyncio.open_connection(proxy_host, proxy_port)
        connect_request = (
            f"CONNECT {target_host}:{target_port} HTTP/1.1\r\n"
            f"Host: {target_host}:{target_port}\r\n"
            f"X-Forwarded-For: {client_ip}\r\n"
            f"Forwarded: for={client_ip}\r\n"
            "\r\n"
        )
        remote_writer.write(connect_request.encode())
        await remote_writer.drain()
        response = await remote_reader.readuntil(b"\r\n\r\n")
        if not response.startswith(b"HTTP/1.1 200"):
            print(f"Proxy connection failed: {response.decode(errors='ignore')}")
            remote_writer.close()
            await remote_writer.wait_closed()
            client_writer.close()
            await client_writer.wait_closed()
            return
    else:
        print(f"{client_ip} => {original_ip}:{target_port}: Direct connection for {target_host}:{target_port}")
        remote_reader, remote_writer = await connect_direct(target_host, target_port)

    if initial_data:
        remote_writer.write(initial_data)
        await remote_writer.drain()

    await asyncio.gather(
        pipe(client_reader, remote_writer),
        pipe(remote_reader, client_writer)
    )

async def start_servers(
    listen_host: str,
    https_port: int,
    http_port: int,
    proxy_host: Optional[str],
    proxy_port: Optional[int],
    no_proxy_list: List[str],
    proxy_only_list: List[str]
) -> None:
    """Start both HTTP and HTTPS proxy servers"""
    https_server = await asyncio.start_server(
        lambda r, w: handle_https_client(r, w, proxy_host, proxy_port, no_proxy_list, proxy_only_list),
        listen_host, https_port)

    http_server = await asyncio.start_server(
        lambda r, w: handle_http_client(r, w, proxy_host, proxy_port, no_proxy_list, proxy_only_list),
        listen_host, http_port)

    print(f"SNI proxy (HTTPS) listening on {listen_host}:{https_port}")
    print(f"Host proxy (HTTP) listening on {listen_host}:{http_port}")

    if proxy_host and proxy_port:
        print(f"Forwarding to proxy at {proxy_host}:{proxy_port}")
    else:
        print("No proxy configured (will use direct connections when allowed)")
    print(f"No proxy rules: {no_proxy_list or 'none'}")
    print(f"Proxy only rules: {proxy_only_list or 'none'}")

    async with https_server, http_server:
        await asyncio.gather(
            https_server.serve_forever(),
            http_server.serve_forever()
        )

def main():
    env_proxy_host, env_proxy_port = get_proxy_from_env()
    env_no_proxy = get_no_proxy_list()
    env_proxy_only = get_proxy_only_list()
    env_listen = os.environ.get('LISTEN', DEFAULT_LISTEN_HOST)
    env_https_port = os.environ.get('HTTPS_PORT', str(DEFAULT_LISTEN_PORT))
    env_http_port = os.environ.get('HTTP_PORT', str(DEFAULT_LISTEN_HTTP_PORT))

    parser = argparse.ArgumentParser(description='Async HTTP/HTTPS Proxy with client IP forwarding')
    parser.add_argument('--listen-host', default=env_listen, help='Host to listen on')
    parser.add_argument('--https-port', type=int, default=int(env_https_port), help='Port to listen for HTTPS')
    parser.add_argument('--http-port', type=int, default=int(env_http_port), help='Port to listen for HTTP')
    parser.add_argument('--proxy-host', default=env_proxy_host, help='Proxy server host')
    parser.add_argument('--proxy-port', type=int, default=env_proxy_port, help='Proxy server port')
    parser.add_argument('--no-proxy', default=','.join(env_no_proxy), help='Comma-separated list of domains to exclude from proxying')
    parser.add_argument('--proxy-only', default=','.join(env_proxy_only), help='Comma-separated list of domains to proxy only')

    args = parser.parse_args()

    no_proxy_list = [domain.strip().lower() for domain in args.no_proxy.split(',') if domain.strip()]
    proxy_only_list = [domain.strip().lower() for domain in args.proxy_only.split(',') if domain.strip()]

    asyncio.run(start_servers(
        args.listen_host,
        args.https_port,
        args.http_port,
        args.proxy_host,
        args.proxy_port,
        no_proxy_list,
        proxy_only_list
    ))

if __name__ == "__main__":
    main()
